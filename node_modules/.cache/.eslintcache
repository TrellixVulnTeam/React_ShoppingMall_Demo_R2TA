[{"/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/index.js":"1","/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/reportWebVitals.js":"2","/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/App.js":"3","/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/Detail.js":"4","/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/data.js":"5","/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/Cart.js":"6"},{"size":1856,"mtime":1637067834678,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1635927938247,"results":"9","hashOfConfig":"8"},{"size":6503,"mtime":1637144055142,"results":"10","hashOfConfig":"8"},{"size":6783,"mtime":1637148691315,"results":"11","hashOfConfig":"8"},{"size":340,"mtime":1635948864225,"results":"12","hashOfConfig":"8"},{"size":2464,"mtime":1637068461986,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"zh4tdg",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"17"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"17"},"/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/index.js",["31"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { combineReducers, createStore } from \"redux\";\n\nlet basicState = [\n  { id: 0, name: \"멋진신발\", quan: 2 },\n  { id: 1, name: \"멋진신발2\", quan: 1 },\n  { id: 2, name: \"멋진신발3\", quan: 3 },\n];\n\nfunction reducer(state = basicState, action) {\n  if (action.type === \"addItem\") {\n    let copy = [...state];\n    let findName = copy.find((i) => {\n      return i.name == action.payload.name;\n    });\n    if (findName) {\n      findName.quan++;\n      return copy;\n    } else {\n      copy.push(action.payload);\n      return copy;\n    }\n  } else if (action.type === \"addQuan\") {\n    let copy = [...state];\n    console.log(action.payload.id);\n    copy[action.payload.id].quan++;\n\n    return copy;\n  } else if (action.type === \"delQuan\") {\n    let copy = [...state];\n    if (copy[action.payload.id].quan > 0) copy[action.payload.id].quan--;\n\n    return copy;\n  } else {\n    return state;\n  }\n}\n\nlet alertBasic = true;\n\nfunction reducer2(state = alertBasic, action) {\n  if (action.type === \"alertClose\") {\n    state = false;\n    return state;\n  }\n  return state;\n}\n\nlet store = createStore(combineReducers({ reducer, reducer2 }));\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/React_ShoppingMall_Demo\">\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["32","33"],"/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/reportWebVitals.js",[],"/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/App.js",["34"],"import React, { useContext, useState, lazy, Suspense } from \"react\";\nimport { Navbar, Container, Nav, NavDropdown, Button } from \"react-bootstrap\";\nimport \"./App.css\";\nimport shoeList from \"./data\";\nimport styled from \"styled-components\";\n\nimport { Link, Route, Switch, useHistory } from \"react-router-dom\";\n\nimport axios from \"axios\";\n// import Detail from \"./Detail.js\";\nlet Detail = lazy(() => {\n  return import(\"./Detail.js\");\n});\n\n// import Cart from \"./Cart.js\";\nlet Cart = lazy(() => {\n  return import(\"./Cart.js\");\n});\n\nlet Pointer = styled.img`\n  cursor: pointer;\n`;\n\nexport let stockContext = React.createContext();\n// 범위 생성(다른 파일의 컴포넌트에서 사용할 시 export 필요)\n\nfunction App() {\n  let [shoes, shoesChange] = useState(shoeList);\n  let [stock, stockChange] = useState([10, 11, 12, 15, 14, 20]);\n\n  // function dataAdd(data) {\n  //   let newData = [...shoes];\n  //   let addData = [...newData, ...data];\n  //   shoesChange(addData);\n  // }\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Container>\n          <Navbar.Brand as={Link} to=\"/\">\n            ShoeShop\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"me-auto\">\n              {/* <Nav.Link>\n                <Link to=\"/\">Home</Link>\n              </Nav.Link> */}\n              <Nav.Link as={Link} to=\"/\">\n                Home\n              </Nav.Link>\n              <Nav.Link as={Link} to=\"/detail/0\">\n                Detail\n              </Nav.Link>\n              <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\">\n                  Another action\n                </NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.3\">\n                  Something\n                </NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.4\">\n                  Separated link\n                </NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n\n      {/* Switch태그로 감싸면 중복되는 url주소 있어도 상단에 작성된 하나만 보여줌 */}\n      <Switch>\n        <Route exact path=\"/\">\n          <div className=\"background\">\n            <h1>20% Season off</h1>\n            <p>jumbotron</p>\n            <p>\n              <Button variant=\"primary\">Primary</Button>\n            </p>\n          </div>\n          <div className=\"container\">\n            {/* 범위 생성 html */}\n            <stockContext.Provider value={stock}>\n              <div className=\"row\">\n                {shoes.map((item, index) => {\n                  return <ItemBox item={item} index={index} key={index} />;\n                })}\n              </div>\n            </stockContext.Provider>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                // 로딩중 UI\n\n                // axios post 요청 = 데이터 전송\n                // axios.post('서버URL', {id : \"아이디\", pw : 1234});\n\n                // axios get요청\n                axios\n                  .get(\"https://codingapple1.github.io/shop/data2.json\")\n                  .then((result) => {\n                    // 로딩중 UI 안보이게\n                    //서버와 연결 성공했을때\n                    // result는 성공해서 받아온 모든 정보들이 담겨있는 객체\n                    shoesChange([...shoes, ...result.data]);\n                    // result.data는 결과 객체에서 데이터 프로퍼타에 해당하는 값만 가져옴\n                  })\n                  .catch(() => {\n                    //서버와 연결 실패했을때\n                    console.log(\"실패!\");\n                  });\n                //fetch도 위와 사용법은 거의 같음 대신 axios는 JSON파일의 \"\":\"\" 내용의 문자열에서\n                // \"\"를 제거하여 객체 타입으로 반환해주고 fetch 함수는 JSON 그대로 반환하기때문에 객체타입으로 변환하는 작업이 필요하다.\n                // fetch(\"https://codingapple1.github.io/shop/data2.json\")\n                //   .then((result) => {\n                //     console.log(result.data);\n                //   })\n                //   .catch();\n                // 위처럼 사용하면 undefined 출력됨, 객체타입으로 변환 필요\n              }}\n            >\n              더보기\n            </button>\n          </div>\n        </Route>\n        <Route exact path=\"/detail/:id\">\n          <stockContext.Provider value={stock}>\n            <Suspense fallback={<div>로딩중입니다...</div>}>\n              <Detail\n                shoes={shoes}\n                shoesChange={shoesChange}\n                stock={stock}\n                stockChange={stockChange}\n              />\n            </Suspense>\n          </stockContext.Provider>\n        </Route>\n\n        <Route path=\"/cart\">\n          <Suspense fallback={<div>로딩중입니다...</div>}>\n            <Cart />\n          </Suspense>\n        </Route>\n\n        <Route path=\"/:id\">\n          {/* :id 는 아무문자를 의미 */}\n          <div>아무거나 적었을때 이거 보여줌</div>\n        </Route>\n      </Switch>\n      {/* <Route path=\"~~~\" component={~~~}></Route> */}\n    </div>\n  );\n}\n\nfunction ItemBox(props) {\n  let history = useHistory();\n\n  // state 공유 범위 사용 변수\n  let stock = useContext(stockContext);\n\n  return (\n    <div\n      className=\"col-md-4\"\n      onClick={() => {\n        history.push(\"/detail/\" + props.item.id);\n      }}\n    >\n      <Pointer\n        src={\n          \"https://codingapple1.github.io/shop/shoes\" +\n          (props.index + 1) +\n          \".jpg\"\n        }\n        alt=\"상품이미지1\"\n        width=\"100%\"\n      />\n      <h4>{props.item.title}</h4>\n      <p>\n        {props.item.content} & {props.item.price}\n      </p>\n      <Stock index={props.index}></Stock>\n    </div>\n  );\n}\n\nfunction Stock(props) {\n  // state 공유 범위 사용 변수\n  let stock = useContext(stockContext);\n\n  // 부모의 context범위 안에 포함되어 있는 컴포넌트들은 전부 state값 공유 가능\n  // 공유 범위 사용 변수 작성 시...\n  return <p>재고 : {stock[props.index]}</p>;\n}\n\nexport default App;\n","/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/Detail.js",["35","36","37","38","39","40","41"],"import axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Navbar, Container, Nav, NavDropdown, Button } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { stockContext } from \"./App\";\nimport \"./Detail.scss\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\n\nlet Box = styled.div`\n  padding: 20px;\n`;\n\nlet Title = styled.h4`\n  font-size: 25px;\n  color: ${(props) => props.color};\n`;\n\n// class Detail2 extends React.Component{\n//   componentDidMount(){\n//     //컴포넌트 생성될 때\n//   }\n\n//   componentWillUnmount(){\n//     // 컴포넌트 소멸할 때\n//   }\n// }\n\nfunction Detail(props) {\n  // useEffect(() => {\n  //   async function fetchResult() {\n  //     let result = await axios.get(\n  //       \"https://codingapple1.github.io/shop/data2.json\"\n  //     );\n  //     props.shoesChange([...props.shoes, ...result.data]);\n  //   }\n  //   console.log(props.shoes);\n  //   fetchResult();\n  // }, []);\n\n  let stock = useContext(stockContext);\n  // import해온 context 범위의 state 사용 가능해짐\n\n  console.log(props.shoes);\n\n  let [alert, alertChange] = useState(true);\n  let [inputData, inputDataChange] = useState(\"\");\n\n  // 컴포넌트가 mount 되었을때, update 될때 특정 코드 실행\n  // use Effect 는 여러개 생성 가능 대신 먼저 적힌 코드부터 실행\n  // use Effect 콜백함수 뒤에 인자로 []를 사용하여 안에 특정 state를 집어넣을 수 있다.\n  // 즉 []는 state 조건을 뜻하고 해당 []가 비어있으면 조건에 맞는값이 없으므로\n  // 해당 useEffect는 실행되지 않는다. = 해당 컴포넌트가 처음 로드될때만 실행됨\n  // [] 내부에 state 여러개 추가 가능 ex) [state1, state2...]\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      alertChange(false);\n    }, 2000);\n\n    console.log(\"hello\");\n\n    // unmount 될때\n    return () => {\n      clearTimeout(timer);\n    };\n    // settimeout은 해당 초가 지나기 전에 사용자에 의해 페이지 변경이 일어나면\n    // 버그가 발생할 수 있어 실행 후 제거해주는 것이 좋다. = clearTimeout\n  }, []);\n\n  let history = useHistory();\n  let { id } = useParams();\n  // useParams 반환값은 객체 그 안에 url의 모든 파라미터 담겨있음\n  // 그래서 destructuring 을 사용해 변수에 담아줌\n\n  let selectItem = props.shoes.find((i) => {\n    return i.id == id;\n  });\n  // find 메서드는 앞에 온 배열의 하나하나를 인자로 넣어주어 뒤에 콜백함수에 적어준 조건에 맞는 첫번째 값을 반환한다.\n  // 만약 조건에 맞는 모든 값들을 얻고 싶다면 filter 함수를 사용해 배열형태로 조건에 맞는 값들을 받아올 수 있다.\n\n  console.log(selectItem);\n  console.log(id);\n\n  function stockMinus() {\n    let stock = [...props.stock];\n    let idx = selectItem.id;\n    console.log(stock);\n    stock.splice(idx, 1, stock[idx] - 1);\n    console.log(stock);\n    return stock;\n  }\n\n  let [tab, tabChange] = useState(0);\n  let [onoff, onoffChange] = useState(false);\n\n  return (\n    <div className=\"container\">\n      <Box>\n        <Title className=\"red\">Detail</Title>\n      </Box>\n\n      {inputData}\n      <input\n        onChange={(e) => {\n          inputDataChange(e.target.value);\n        }}\n      />\n\n      {\n        // 보통의 UI가 이렇게 true. false를 반환하는 state를 만들고\n        // 삼항조건식으로 생성 및 제거하는 방법으로 구축한다.\n        alert === true ? (\n          <div className=\"my-alert-2\">\n            <p>재고가 얼마 남지 않았습니다</p>\n          </div>\n        ) : null\n      }\n\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <img\n            src={\n              \"https://codingapple1.github.io/shop/shoes\" +\n              (selectItem.id + 1) +\n              \".jpg\"\n            }\n            width=\"100%\"\n            alt=\"이미지\"\n          />\n        </div>\n        <div className=\"col-md-6 mt-4\">\n          <h4 className=\"pt-5\">{selectItem.title}</h4>\n          <p>{selectItem.content}</p>\n          <p>{selectItem.price}원</p>\n          <Info stock={props.stock} selectItem={selectItem}></Info>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              props.stockChange(stockMinus);\n              props.dispatch({\n                type: \"addItem\",\n                payload: {\n                  id: props.state[props.state.length - 1].id + 1,\n                  name: selectItem.title,\n                  quan: 1,\n                },\n              });\n              history.push(\"/cart\");\n            }}\n          >\n            주문하기\n          </button>\n          &nbsp;\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              history.push(\"/\");\n            }}\n          >\n            뒤로가기\n          </button>\n        </div>\n      </div>\n\n      <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"link-0\"\n            onClick={() => {\n              tabChange(0);\n              onoffChange(false);\n            }}\n          >\n            상품설명\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"link-1\"\n            onClick={() => {\n              tabChange(1);\n              onoffChange(false);\n            }}\n          >\n            배송정보\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            eventKey=\"link-2\"\n            onClick={() => {\n              tabChange(2);\n              onoffChange(false);\n            }}\n          >\n            환불약관\n          </Nav.Link>\n        </Nav.Item>\n      </Nav>\n\n      {/* in은 애니메이션 킬지 안킬지, classNames는 css지정 이름, timeout은 지속시간 */}\n      <CSSTransition in={onoff} classNames=\"wow\" timeout={500}>\n        <TabContent tab={tab} onoffChange={onoffChange} />\n      </CSSTransition>\n    </div>\n  );\n}\n\nfunction TabContent(props) {\n  useEffect(() => {\n    props.onoffChange(true);\n  });\n\n  if (props.tab === 0) {\n    return <div>0번째 내용입니다.</div>;\n  } else if (props.tab === 1) {\n    return <div>1번째 내용입니다.</div>;\n  } else if (props.tab === 2) {\n    return <div>2번째 내용입니다.</div>;\n  }\n}\n\nfunction Info(props) {\n  return <p>재고 : {props.stock[props.selectItem.id]}</p>;\n}\n\nfunction propsChange(state) {\n  console.log(state);\n  return {\n    state: state.reducer,\n    alert: state.reducer2,\n  };\n}\n\nexport default connect(propsChange)(Detail);\n","/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/data.js",[],"/Users/kimjunghwan/coding_apple/REACT CLASS/shop/src/Cart.js",["42"],"import React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\n\nfunction Cart(props) {\n  // 신문법 훅 useSelector로 createStore에 담긴 모든 reducer 즉, 스테이트들 받아옴\n  let state = useSelector((state) => state);\n  console.log(state.reducer);\n\n  // createStore에 담긴 모든 reducer 즉, dispatch 즉 액션 받아옴\n  let dispatch = useDispatch();\n\n  return (\n    <div>\n      <div>\n        <Table responsive=\"md\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>상품명</th>\n              <th>수량</th>\n              <th>변경</th>\n            </tr>\n          </thead>\n          <tbody>\n            {state.reducer.map((item, index) => {\n              return (\n                <tr key={index}>\n                  <td>{item.id}</td>\n                  <td>{item.name}</td>\n                  <td>{item.quan}</td>\n                  <td>\n                    <button\n                      onClick={() => {\n                        console.log(item.id);\n                        dispatch({\n                          type: \"addQuan\",\n                          payload: { id: item.id },\n                        });\n                      }}\n                    >\n                      +\n                    </button>\n                    <button\n                      onClick={() => {\n                        dispatch({\n                          type: \"delQuan\",\n                          payload: { id: item.id },\n                        });\n                      }}\n                    >\n                      -\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n        {props.alert === true ? (\n          <div className=\"my-alert-2\">\n            <p>지금 구매하시면 신규할인 20%</p>\n            <button\n              onClick={() => {\n                props.dispatch({ type: \"alertClose\" });\n              }}\n            >\n              닫기\n            </button>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\n// 구버전 리덕스 state 받아오기 컴포넌트에서 props로 받아서 사용해야함\n// function propsChange(state) {\n//   console.log(state);\n//   return {\n//     state: state.reducer,\n//     alert: state.reducer2,\n//   };\n// }\n\n// export default connect(propsChange)(Cart);\n\nexport default Cart;\n",{"ruleId":"43","severity":1,"message":"44","line":21,"column":21,"nodeType":"45","messageId":"46","endLine":21,"endColumn":23},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":162,"column":7,"nodeType":"53","messageId":"54","endLine":162,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":13},{"ruleId":"51","severity":1,"message":"56","line":3,"column":10,"nodeType":"53","messageId":"54","endLine":3,"endColumn":16},{"ruleId":"51","severity":1,"message":"57","line":3,"column":18,"nodeType":"53","messageId":"54","endLine":3,"endColumn":27},{"ruleId":"51","severity":1,"message":"58","line":3,"column":34,"nodeType":"53","messageId":"54","endLine":3,"endColumn":45},{"ruleId":"51","severity":1,"message":"59","line":3,"column":47,"nodeType":"53","messageId":"54","endLine":3,"endColumn":53},{"ruleId":"51","severity":1,"message":"52","line":42,"column":7,"nodeType":"53","messageId":"54","endLine":42,"endColumn":12},{"ruleId":"43","severity":1,"message":"44","line":77,"column":17,"nodeType":"45","messageId":"46","endLine":77,"endColumn":19},{"ruleId":"51","severity":1,"message":"60","line":3,"column":10,"nodeType":"53","messageId":"54","endLine":3,"endColumn":17},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'stock' is assigned a value but never used.","Identifier","unusedVar","'axios' is defined but never used.","'Navbar' is defined but never used.","'Container' is defined but never used.","'NavDropdown' is defined but never used.","'Button' is defined but never used.","'connect' is defined but never used.","no-global-assign","no-unsafe-negation"]